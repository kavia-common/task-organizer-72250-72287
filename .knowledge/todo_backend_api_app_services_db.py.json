{"is_source_file": true, "format": "Python", "description": "This file provides a MongoDB connection service for a Flask backend application. It initializes a singleton MongoClient, manages the database connection, and exposes functions to initialize and retrieve the database handle. The code reads configuration from environment variables and integrates with Flask app lifecycle hooks.", "external_files": ["flask", "pymongo", "pymongo.database"], "external_methods": ["os.getenv", "flask.current_app.name", "pymongo.MongoClient", "pymongo.database.Database"], "published": ["init_db", "get_db"], "classes": [], "methods": [{"name": "MongoClient _create_mongo_client(mongo_url: str)", "description": "Creates and returns a MongoClient instance with the provided MongoDB URL.", "scope": "", "scopeKind": ""}, {"name": "None init_db(app)", "description": "Initializes the MongoDB connection and attaches it to the Flask app, reading configuration from environment variables.", "scope": "", "scopeKind": ""}, {"name": "Database get_db()", "description": "Returns the initialized MongoDB database handle, raising an error if it is not yet initialized.", "scope": "", "scopeKind": ""}, {"name": "_close_mongo_client(exception)", "scope": "init_db", "scopeKind": "function", "description": "unavailable"}], "calls": ["os.getenv", "pymongo.MongoClient", "current_app.name", "app.extensions", "app.teardown_appcontext"], "search-terms": ["MongoDB connection", "Flask Mongo start", "environment variable MONGODB_URL", "database singleton", "app extensions mongo"], "state": 2, "file_id": 7, "knowledge_revision": 15, "git_revision": "", "ctags": [{"_type": "tag", "name": "_client", "path": "/home/kavia/workspace/code-generation/task-organizer-72250-72287/todo_backend_api/app/services/db.py", "pattern": "/^_client: Optional[MongoClient] = None$/", "language": "Python", "typeref": "typename:Optional[MongoClient]", "kind": "variable"}, {"_type": "tag", "name": "_close_mongo_client", "path": "/home/kavia/workspace/code-generation/task-organizer-72250-72287/todo_backend_api/app/services/db.py", "pattern": "/^    def _close_mongo_client(exception):  # noqa: ANN001$/", "file": true, "language": "Python", "kind": "function", "signature": "(exception)", "scope": "init_db", "scopeKind": "function"}, {"_type": "tag", "name": "_create_mongo_client", "path": "/home/kavia/workspace/code-generation/task-organizer-72250-72287/todo_backend_api/app/services/db.py", "pattern": "/^def _create_mongo_client(mongo_url: str) -> MongoClient:$/", "language": "Python", "typeref": "typename:MongoClient", "kind": "function", "signature": "(mongo_url: str)"}, {"_type": "tag", "name": "_db", "path": "/home/kavia/workspace/code-generation/task-organizer-72250-72287/todo_backend_api/app/services/db.py", "pattern": "/^_db: Optional[Database] = None$/", "language": "Python", "typeref": "typename:Optional[Database]", "kind": "variable"}, {"_type": "tag", "name": "get_db", "path": "/home/kavia/workspace/code-generation/task-organizer-72250-72287/todo_backend_api/app/services/db.py", "pattern": "/^def get_db() -> Database:$/", "language": "Python", "typeref": "typename:Database", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "init_db", "path": "/home/kavia/workspace/code-generation/task-organizer-72250-72287/todo_backend_api/app/services/db.py", "pattern": "/^def init_db(app) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "(app)"}], "hash": "e1e36c9a1d6d7269ffdd9f2ba73b29e6", "format-version": 4, "code-base-name": "todo_backend_api", "filename": "todo_backend_api/app/services/db.py", "fields": [{"name": "Optional[MongoClient] _client", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Optional[Database] _db", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"15": ""}]}